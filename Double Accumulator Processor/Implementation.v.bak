// PC register, 2:1 mux, memData register, memory, instruction register
module implementation(
// Register inputs and out
input reg [15:0] input_value,
input reg CLK, RST,


// Memory input and out
input reg [15:0] din,
input reg [15:0] Addr,
input reg Mem_Write,
output wire [15:0] dout,

// ALU inputs and out
input reg [15:0] A, B,
input reg Op,
output wire [15:0] ALU_Out,


//Instruction Register
input reg [15:0] instruction,
output wire [1:0] reg1, reg2, regDest,
output wire [5:0] imm1,
output wire [7:0] imm2,
output wire [9:0] imm3
);


parameter HALF_PERIOD=50;
parameter PERIOD = HALF_PERIOD*2;
wire [15:0] output_value;


ALU alu (
		.A(output_value),
		.B(B),
		.Op(Op),
		.ALU_Out(ALU_Out)
	);

Memory mem (
.Data(din),
.Addr(output_value),
.Mem_Write(Mem_Write),
.CLK(CLK),
.Mem_Data(dout)
);

Register PC(
.CLK(CLK),
.input_value(ALU_Out),
.RST(RST),
.output_value(output_value)
);

//InstructionRegister IR(
//.instruction(dout),
//.reg1(reg1), .reg2(reg2), .regDest(regDest),
//.imm1(imm1), .imm2(imm2), .imm3(imm3)
//);


endmodule
